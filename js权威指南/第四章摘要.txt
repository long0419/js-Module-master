1.位运算符
    左移：左移一位相当于它乘以2 ，左移二位相当于乘以4
    右移：右移一位相当于它除以2 ，右移二位相当于除以4

2.“==” 和 “===”的区别
严格相等运算符“===” 首先计算其操作数的值，然后比较这两个值，比较过程没有任何类型转换，大致比较如下：

    如果两个值类型不相同，则不等
    如果两个值都是null或者undefined 则不等
    如果两个值都是Boolean  则他们相等
    如果其中一个值是NaN ，或者两个值都是NaN ，则它们不相等。NaN和其他任何值都是不相等的，包括它本身！
    如果两个值为数字切数值相等。则它们相等。如果一个值为0，另一个值为-0 ，则他们同样相等。


相等运算符“==”和恒等运算符相似，但相等运算符的比较并不严格。如果两个操作数不是同一类型，那么相等运算符会尝试进行一些类型转换，然后进行比较：

    如果两个操作数的类型相同，则和上文所述的严格相等的比较规则一样。
    如果两个操作 数类型不同，“==”相等操作符也可能会认为它们相等。检测相等将会遵守如下规则和类型转换：
        如果一个值是null  另一个是undefined ，则他们相等。
        如果一个值是数字，另一个是字符串，先将字符串转换为数字，然后使用转换后的值进行比较。



3.instanceof运算符
    instanceof运算符希望左操作数是一个对象，右操作数标识对象的类。如果左侧对象是右侧类的实例，则表达式返回true ,否则返回false。要理解instanceof必须理解原型链(prototype chain) , 6.2.2节
为了计算表达式o instanceof f , js首先计算f.prototype,然后在原型链中找o，如果找到，那么就是他的实例，返回true 。 反之false 。


4.eval("3+2")
    和其他很多解释性语言一样，js同样可以解释运行由js源码组成的字符串，并产生一个值。js通过全局函数eval()来完成。


5.typeof
    typeof 返回值为表示操作数类型的一个字符串。

6.delete运算符
    delete运算符 用来删除对象属性或者数组元素。 就像赋值、递增、递减运算符一样，不是用来返回一个值的。