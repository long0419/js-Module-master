1.js的函数可以嵌套在其他函数中定义，这样他就可以访问它们被定义时所处的作用域中的任何变量。这意味着js函数构成了一个【闭包】，这是个很强有力的能力。

2.js可以把函数赋值给变量，或者作为参数传递给其他函数。因为函数就是对象，所以可以给他们设置属性，甚至调用他们的方法。

3.嵌套函数
    嵌套函数它们可以访问嵌套他们的函数的参数和变量。

4.函数调用：
        this是一个关键字，不是变量，也不是属性名。js语法是不允许给this赋值的。和变量不同，关键字this没有作用域的限制，嵌套的函数不会从调用他的函数中继承this 。
    如果嵌套函数作为方法调用，其this的值指向调用它的对象。如果嵌套函数作为函数调用,其this值不是全局对象(非严格模式下)就是undefined(严格模式下)。很多人误以
    为调用嵌套函数时this会只想调用外层函数的上下文。【如果你想访问这个外部函数的this值，需要将this的值保存在一个变量里，这个变量和内部函数都同在一个作用域内。】
    通常使用self来保存this。

5.函数的调用
        JS函数也是对象，和其他的js对象没有两样，函数对象也可以包含方法。其中两个方法call()和apply()可以用来间接的调用函数。两个方法都允许显式指定调用所需的this值，
    也就是说，任何函数可以作为任何对象的方法来调用，哪怕这个函数不是哪个对象的方法。call()方法使用他自由的实参列表作为函数的实参，apply（）方法则要求以数组的形式
    传入参数。

6.js函数定义并未指定函数形参的类型，函数调用也未对传入的实参值做任何类型检查。实际上，JS函数调用甚至不检查传入形参的个数。
        可选形参：
            当调用函数的时候传入的实参比函数声明时指定的形参个数要少，剩下的形参都将设置为undefined值。

        可变长的实参列表：
            当调用函数的时候实参个数超过函数定义时的形参个数时，没有办法直接获得未命名值的引用。在函数体内，标识符arguments是指向实参对象的引用，实参对象是一个类数
         组对象，这样可以通过数字下标就能访问传入函数的实参值，而不用非要通过名字来得到实参。
            实参对象有一个重要的用处，就是让函数可以操作任意数量的实参。（注意例子）
            ES5中移除了实参对象的这个特殊特性。在严格模式下还有一点不同，飞严格模式下，函数里面的arguments仅仅是一个标识符，在严格模式中，它变成了一个保留字。 176